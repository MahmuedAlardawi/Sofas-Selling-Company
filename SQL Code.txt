CPCS-241 final project
Mahmued Alardawi - 2315209 - CS1

TABLES:-

CREATE TABLE SALESMAN (
NATONAL_ID VARCHAR2(10) PRIMARY KEY,
FNAME VARCHAR2(40) NOT NULL,
MNAME VARCHAR2(40),
LNAME VARCHAR2(40) NOT NULL,
BDATE DATE,
GENDER VARCHAR2(20),
EMPLOYMET_TYPE VARCHAR2(20) NOT NULL,
SALARY NUMBER,
CITY VARCHAR2(20),
STREET VARCHAR2(20),
SUP_ID VARCHAR2(10),
BRANCH_ID INT,
SDATE DATE DEFAULT SYSDATE,
CHECK (TRUNC(MONTHS_BETWEEN(SDATE, BDATE)) > 17),
FOREIGN KEY (SUP_ID) REFERENCES SALESMAN (NATONAL_ID) ON DELETE CASCADE
);


CREATE TABLE PHONE (
NATONAL_ID VARCHAR2(10) PRIMARY KEY,
PHONE VARCHAR2(10) UNIQUE,
FOREIGN KEY (NATONAL_ID) REFERENCES SALESMAN (NATONAL_ID) ON DELETE CASCADE
);

CREATE TABLE BRANCH (
BRANCH_ID INT PRIMARY KEY,
CITY VARCHAR2(20),
STREET VARCHAR2(20),
MANAGER_ID VARCHAR2(10),
FOREIGN KEY (MANAGER_ID) REFERENCES SALESMAN (NATONAL_ID) ON DELETE CASCADE
);

ALTER TABLE SALESMAN ADD
FOREIGN KEY (BRANCH_ID) REFERENCES BRANCH (BRANCH_ID) ON DELETE CASCADE;

CREATE TABLE BRAND (
BRAND_ID INT PRIMARY KEY,
BRAND_NAME VARCHAR2(30) UNIQUE
);

CREATE TABLE SOFA (
SOFA_ID VARCHAR2(10) PRIMARY KEY,
SOFA_TYPE VARCHAR2(30),
STATUS VARCHAR2(20),
PRICE NUMBER,
BRAND_ID INT,
BRANCH_ID INT,
FOREIGN KEY (BRAND_ID) REFERENCES BRAND (BRAND_ID) ON DELETE CASCADE,
FOREIGN KEY (BRANCH_ID) REFERENCES BRANCH (BRANCH_ID) ON DELETE CASCADE
);

CREATE TABLE CUSTOMER (
CUSTUMER_ID INT PRIMARY KEY,
FNAME VARCHAR2(40) NOT NULL,
LNAME VARCHAR(40),
PHONE VARCHAR2(10) NOT NULL,
CITY VARCHAR2(20),
STREET VARCHAR2(20)
);

CREATE TABLE PAYMENT (
PAYMENT_ID INT PRIMARY KEY,
AMOUNT NUMBER NOT NULL,
AMOUNT_PAID NUMBER,
REM_TO_CUS NUMBER,
PAYMENT_METHODE VARCHAR2(30) NOT NULL,
PAYMENT_DATE DATE NOT NULL,
DELIVERY_DATE DATE,
SALESMAN_ID VARCHAR2(10),
CUSTOMER_ID INT,
FOREIGN KEY (SALESMAN_ID) REFERENCES SALESMAN (NATONAL_ID) ON DELETE CASCADE,
FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER (CUSTUMER_ID) ON DELETE CASCADE
);

-----------------------------------------------------

QUERIE (1): SALESMEN REPORT

Display the Salesmen information and check the employment type if its full_time
the monthly target is 250k, and if part_time the the monthly target is 150k.
If the target is reach the salesman will get a 500 bonus.

SELECT S.SALESMAN_ID, S.FNAME, S.LNAME, S.EMLOYMENT_TYPE, S.SALARY, 
SUM(P.AMOUNT) AS TOTAL_SALES, 
	CASE
		WHEN S.EMPLOYMENT_TYPE = 'FULL-TIME' AND TOTAL_SALES > 250000
		THEN 'TARGET REACHED (BONUS)'
		WHEN S.EMPLOYMENT_TYPE = 'PART-TIME' AND TOTAL_SALES > 150000
		THEN 'TARGET REACHED (BONUS)' 
		ELSE 'TARGET NOT REACHED (NO BONUS)'
	END AD BOUNS
FROM SALESMAN AS S, PAYMENT AS P
WHERE S.SALESMAN_ID = P.SALESMAN_ID
ORDER BY TOTAL;

-----------------------------------------------------

QUERIE (2): SALESMEN REPORT FOR 'X' SALESMAN

Display the Salesman information and check the employment type if its full_time
the monthly target is 250k, and if part_time the the monthly target is 150k.
If the target is reach the salesman will get a 500 bonus.

SELECT S.SALESMAN_ID, S.FNAME, S.LNAME, S.EMLOYMENT_TYPE, S.SALARY, 
SUM(P.AMOUNT) AS TOTAL_SALES, 
	CASE
		WHEN S.EMPLOYMENT_TYPE = 'FULL-TIME' AND TOTAL_SALES > 250000
		THEN 'TARGET REACHED (BONUS)'
		WHEN S.EMPLOYMENT_TYPE = 'PART-TIME' AND TOTAL_SALES > 150000
		THEN 'TARGET REACHED (BONUS)' 
		ELSE 'TARGET NOT REACHED (NO BONUS)'
	END AD BOUNS
FROM SALESMAN AS S, PAYMENT AS P
WHERE S.SALESMAN_ID = '' AND P.SALESMAN_ID = '';

-----------------------------------------------------

QUERIE (3): SOFA AVAILABILITY

SELECT S.STATUS, S.SOFA_ID, S.SOFA_TYPE, S.BRANCH_ID, B.BRAND_ID, B.BRAND_NAME
FROM SOFA AS S, BRAND AS B
WHERE S.STATUS = 'AVAILABLE' AND S.BRAND_ID = B.BRAND_ID
ORDER BY S.STATUS;

-----------------------------------------------------

QUERIE (4): AVERAGE SALARY FOR SALESMAN

SELECT AVG(SALARY) AS AVERAGE_SALARY, COUNT(*) AS NUMBER_OF_SALESMAN
FROM SALESMAN;

-----------------------------------------------------

QUERIE (5): NUMBER OF SOFAS IN EACH BRANCH
SELECT BRANCH_ID, COUNT(*) AS NUMBER_OF_SOFAS
FROM SOFAS
ORDER BY BRANCH_ID;

-----------------------------------------------------

QUERIE (6): DISPALY PAYMENTS HIGHER THAN 'X' PRICE

SELECT P.PAYMENT_ID, P.AMOUNT, P.CUSTOMER_ID, C.FNAME, C.LNAME, C.PHONE,
P.PAYMENT_DATE
FROM P.PAYMENT
INNER JOIN CUSTOMER AS C ON P.CUSTOMER_ID = C.CUSTOMER_ID AND P.AMOUNT > 'X'
ORDER BY AMOUNT;

-----------------------------------------------------

QUERIE (7): DISPLAY ALL PAYMENTS IN YEAR 'X'

SELECT *
FROM PAYMENTS
WHERE PAYMENT_DATE BETWEEN DATE'X-01-01' AND DATE'X-12-31';

-----------------------------------------------------

INSERT INTO SALESMAN
VALUES (1000000000, 'MAHMUED', NULL, 'ALARTDAWI', '2002-9-14', 'MALE', 'PART-TIME', 3000,
'JEDDAH', 'JABAL AN NADIAN', NULL, NULL);



